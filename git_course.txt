git init projectName - To create the repository
git add - to stage the file or changes
git status - to check the current status of the repo
git log - to see the history of the repo
git log --oneline
git log --since="2/anyNumber weeks/days/month ago"
git log --after "yyyy-mm-dd"
git log --before "yyyy-mm-dd"
git log --until "yyyy-mm-dd"
git log -NumberOfLogs - to show number of logs, can be used with any other option given above

git commit -m "Commit Message" - to commit the changes
git commit -am "commit message" - to add and commit changes in one step.
git mv currentFileOrDirectoryName newFileOrDirName - to rename a file or directory
git rm currentFileOrDirectoryName - to remove a file or a directory

git diff --staged - to see the changes of the staged file
git diff commitId - To see the differences till the given commit id
git diff commitId1..commitId2 - to see the differences between two commit id
git diff commitId^ - added ^ symbol, to see the changes including that commit
git diff HEAD^ - to see the changes in the current and previous commit changes.

git commit --amend - to change the last commit message, new file, updated existing file, it will open vi editor, to change the editor use below command
git commit --amend -m "Updated commit message" - to udpate the message
git config --global core.editor "notepad"
--amend - will update the last commit, that is new file, modification of the file, or message.

git reset HEAD bar.txt - to unstage the bar.txt file
git reset HEAD --hard - to revert all the changes and make all the file till their last commit
git reset HEAD^ --hard - to get all the files back from the commit, in other words, cancelling the last commit

git branch branchName - to create a new branch
git checkout branchName - to switch to the perticular branch.
git branch - to check the present branches and the current branch is pointed throught * sign.
git branch -d branchName - to delete the branch.
git checkout -b branchName - to create and switch to the newly created branch.
git merge branchName - merges the branch in the currect checkedout branch. if conflict occurs, open the conflicted file, make the changes to keep the correct version, and save the file. stage and commit the files to complete the merge.
git rebase parentBranch - to make the current branch to have all the changes that parent branch has.
git rebase -i parentBranchName - to change the commit messages, combine the commits.

git rebase -i HEAD~3 - to make all the available operations on last 3 commits.

git tag tagName - till the last commit, the branch will have the special pointer that is tag. We can use the tagname to checkout the branch till that commit 
git push currentBranch targetBranch
ex. git push origin master - to push the changes on the repository.
git remote -v - to get the remote repositories associated with the current local repository.

to generate SSH Key
open the git bash.
C:\Program Files\Git\bin\bash.exe
run the command
ssh-keygen -t rsa -C "your_email@example.com"
to clone the repo
git clone ssh-url - provide the ssh-url to clone the repo
to fetch the remote changes
git fetch targetBranchName
ex. git fetch origin
git merge origin/master - to get the changes from server.

These two steps can be converted into one step by
git pull branchName
ex. git pull origin
git push origin -d branchname to delete the branch from remote repository.
git fetch --all - to get all the udated branches from repository.
git fetch --all --prune - to get the deleted file info.

Stashing ---
git stash save "Stash Msg" - to save the changes done on a branch before switching to another branch.

git stash list - to see the list of all stashes
git stash apply stash@{stashId} - to apply the stashed changes. But it won't delete the stashed changes from the list. To apply and delete the stash, 
git stash pop - it will apply the top stash and delete it from the list of stashes.

git stash drop stash@{stashId} - to delete the stashed changes.
git stash clear - to delete all the stashes.
Stash Tips
Stashes are not transferred to the server when you push
By default, git will not stash changes made to untracked or ignored files
Adding the -u option (or --include-untracked) tells git stash to stash your untracked files

Why Git Log ?
As a developer, you have all the history of your commits. How would you view them in a systematic way?
You may want to alter the output and customize it. Let us see how.
Best Practices
If it seems difficult to summarize what your commit does, it may be because it includes several logical changes or bug fixes. It is best to split up into several commits using git add -p command
Don't end the summary line with a period – it is a title and titles don't end with a period

Tips on Commit Amend
git commit --amend command is a convenient way to fix up the most recent commit
It lets you combine staged changes with the previous commit instead of committing it as a new snapshot
It can also be used to simply edit the previous commit message, without changing its snapshot
